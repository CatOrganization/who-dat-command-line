timestamp(){
  gdate +%s%N | cut -b1-13
}

goget() {
  go get github.com/polygon-io/${1}
  go mod tidy
}

math() {
  echo "scale=3; ${@}" | bc
}

# git helper functions
review() {( set -ex
  go fmt ./...
  #go vet ./...
  go test ./...
  pgon go-lint "${@}"
)}

pr() {( set -e
  gpsu
  gh pr create --fill --web "${@}"
)}

release() {( set -e
  name=${1}
  if [[ -z ${name} ]]; then
    name="production-$(timestamp)"
  fi

  echo "Creating release tagged '${name}' in repo $(git config --get remote.origin.url)..."
  gh release create ${name} --target=master
)}

sibling-branch() {( set -e
  if [[ -z ${1} ]]; then
    echo "gimme a branch name idiot"
    exit 1
  fi 

  set -x

  git stash save "creating sibling branch - $(date)"
  git checkout master
  git pull
  git checkout -b ${1}
  git stash pop
)}

new-branch() {( set -e
  if [[ -z ${1} ]]; then
    echo "gimme a branch name idiot"
    exit 1
  fi 

  set -x

  git checkout master
  git pull
  git checkout -b ${1}
)}

curlDXFeed() {
  curl --user ${DX_FEED_USERNAME}:${DX_FEED_PASSWORD} ${@}
}

# Platform helper functions
curlPlatformStaging() {
  endpoint="${1}"
  shift

  curl -H "Authorization: Bearer ${STAGING_API_KEY}" -v https://api.staging.polygon.io${endpoint} ${@}
}

curlPlatformProd() {
  endpoint="${1}"
  shift

  curl -H "Authorization: Bearer ${POLYGON_API_KEY}" https://api.polygon.io${endpoint} ${@}
}

# Account services helper functions
curlStaging() {
  endpoint="${1}"
  shift
  curl -s --user ${SERVICE_ACCOUNT_EMAIL}:${SERVICE_ACCOUNT_PASSWORD} https://api.staging.polygon.io/accountservices${endpoint} ${@}
}

curlProd() {
  endpoint="${1}"
  shift
  curl -s --user ${SERVICE_ACCOUNT_EMAIL}:${SERVICE_ACCOUNT_PASSWORD} https://api.polygon.io/accountservices${endpoint} ${@}
}

getAccountByEmailProd() {
  curlProd /accounts --data-urlencode "email=${1}" -G
}

getAccountByEmailStaging() {
  curlStaging /accounts --data-urlencode "email=${1}" -G
}

getKeyByStringProd() {
  curlProd /keys --data-urlencode "key=${1}" -G
}

getKeyByStringStaging() {
  curlStaging /keys --data-urlencode "key=${1}" -G
}

# Ceph helper functions
ceph() {
  echo "Using Cluster: $(kubectl config get-contexts | grep "*" | awk '{print $3}')"
  kubectl -n rook-ceph exec -it deploy/rook-ceph-tools -- ceph $@
}

rbd() {
  echo "Using Cluster: $(kubectl config get-contexts | grep "*" | awk '{print $3}')"
  kubectl -n rook-ceph exec -it deploy/rook-ceph-tools -- rbd $@
}

radosgw-admin() {
  echo "Using Cluster: $(kubectl config get-contexts | grep "*" | awk '{print $3}')"
  kubectl -n rook-ceph exec -it deploy/rook-ceph-tools -- radosgw-admin $@
}
